q()
q()
data(glaton)
data(glaton)
data(galton)
library(UsingR)
data(galton)
myHist
myHist <- function(mu) {  hist(galton$child,col="blue",breaks=100)   lines(c(mu, mu), c(0, 150),col="red",lwd=5)   mse <- mean((galton$child - mu)^2)   text(63, 150, paste("mu = ", mu))  text(63, 140, paste("MSE = ", round(mse, 2))) }
myHist <- function(mu) {
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
names(galton)
myHist(70)
myHist(62)
myHist(65)
help(manipulate)
library(manipulate)
help(manipulate)
manipulate(myHist(mu), mu = slider(65,70))
manipulate(plot(1:x), x = slider(5, 10))
myHist <- function(mu) {  hist(galton$child,col="blue",breaks=100)   lines(c(mu, mu), c(0, 150),col="red",lwd=5)   mse <- mean((galton$child - mu)^2)   text(63, 150, paste("mu = ", mu))  text(63, 140, paste("MSE = ", round(mse, 2))) }
myHist
manipulate(myHist(mu), mu = slider(65,70,step=.5))
manipulate(myHist(mu), mu = slider(65,70,step=0.5))
rm(list=ls())
q()
q()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
h <- 3L
h
h(1)
h
h
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(1)
h(NULL)
h(NULL
)
q89
q()
q()
q()
shiny::runGitHub("shiny-examples","rstudio",subdir="001-hello")
shiny::runGitHub("shiny-examples","rstudio",subdir="001-hello")
shiny::runGitHub("shiny-examples","rstudio",subdir="002-text")
shiny::runGitHub("shiny-examples","rstudio",subdir="003-reactivity")
shiny::runGitHub("shiny-examples","rstudio",subdir="004-mpg")
shiny::runGitHub("shiny-examples","rstudio",subdir="005-sliders")
shiny::runGitHub("shiny-examples","rstudio",subdir="006-tabsets")
shiny::runGitHub("shiny-examples","rstudio",subdir="007-widgets")
shiny::runGitHub("shiny-examples","rstudio",subdir="008-html")
shiny::runGitHub("shiny-examples","rstudio",subdir="009-upload")
shiny::runGitHub("shiny-examples","rstudio",subdir="010-download")
shiny::runGitHub("shiny-examples","rstudio",subdir="011-timer")
q()
x <- 0:15
dpois(x,2)
px <- dpois(x,2)
plot(x,px,"h")
par(pch=22, col="red")
plot(x,px,"h")
help(plot)
plot(x,px,type="h",col="blue",lwd=5)
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(x,fx, type = "h", col = "red", lwd = 5,
main = "Poisson(lambda = 2)")
)
plot(x,fx, type = "h", col = "red", lwd = 5,
main = "Poisson(lambda = 2)")
x
ps
px
plot(x,px, type = "h", col = "red", lwd = 5,
main = "Poisson(lambda = 2)")
plot(1:10,dpois(1:10,2), type = "h", col = "red", lwd = 5,
main = "Poisson(lambda = 2)")
plot(0:10,dpois(0:10,2), type = "h", col = "red", lwd = 5,
main = "Poisson(lambda = 2)")
plot(0:8,dpois(0:8,2), type = "h", col = "red", lwd = 5,
main = "Poisson(lambda = 2)")
plot(0:8,dpois(0:8,2), type = "h", col = "red", lwd = 5,
main = "Poisson(lambda = 2)", xlab="x",ylab="probability")
plot(0:8,dpois(0:8,2), type = "h", col = "red", lwd = 5,
main = "Poisson(lambda = 2)", xlab="x",ylab="probability")
plot(0:8,dpois(0:8,2), type = "h", col = "red", lwd = 5,
main = "Poisson(lambda = 2)", xlab="x",ylab="probability")
plot(0:8,dpois(0:8,2), type = "h", col = "blue", lwd = 5,
main = "Poisson(lambda = 2)", xlab="x",ylab="probability")
q()
shiny::runApp('Google Drive/Coursera/Developing Data Products/ShinyApps/ConvergenceP')
help(rnorm)
N <- 5 ;
n <- 20 ;
ts <- matrix(rnorm(n*N), nrow = n, ncol = N)
ts
ts <- matrix(rnorm(n*N, mean=10, sd=2), nrow = n, ncol = N)
ts
plot(1:n,ts)
ts
help(ts)
rm(list=ls())
f <- as.matrix(c(1,2,10,11),ncol=2)
f
f <- as.matrix(c(1,2,10,11),nrow=2,ncol=2)
f
f <- matrix(c(1,2,10,11),nrow=2,ncol=2)
f
cumsum(f)
help(cumsum)
help(within)
apply(f,2,cumsum)
apply(as.data.frame(f),2,cumsum)
N <- 5 ;
n <- 20 ;
series <- data.frame(n=1,matrix(rnorm(n*N, mean=10, sd=2), nrow = n, ncol = N)
)
series
apply(series,1,cumsum)
out <- apply(series,1,cumsum)
class(out)
out
nrow(out)
series
out <- apply(series,2,cumsum)
out
class(out)
help(ts)
series <- matrix(rnorm(n*N, mean=10, sd=2), nrow = n, ncol = N)
series
avgseries <- apply(series,2,cumsum)/seqn ;
seqn <- 1:n ;
avgseries <- apply(series,2,cumsum)/seqn ;
avgseries
tseries <- ts(avgseries)
tseries
plot(ts)
plot(tseries)
plot(tseries, plot.type=single)
plot(tseries, plot.type="single")
help(plot)
plot(tseries, plot.type="single", xlab="Sample size", ylab="Estimate")
shiny::runApp('Google Drive/Coursera/Developing Data Products/ShinyApps/ConvergenceP')
shiny::runApp('Google Drive/Coursera/Developing Data Products/ShinyApps/ConvergenceP')
shiny::runApp('Google Drive/Coursera/Developing Data Products/ShinyApps/ConvergenceP')
shiny::runApp('Google Drive/Coursera/Developing Data Products/ShinyApps/ConvergenceP')
shiny::runApp('Google Drive/Coursera/Developing Data Products/ShinyApps/ConvergenceP')
shiny::runApp('Google Drive/Coursera/Developing Data Products/ShinyApps/ConvergenceP')
runApp()
dir()
setwd("~/Google Drive/Coursera/Developing Data Products/ShinyApps/ConvergenceP")
dir()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help(switch)
help(rexp)
library(help="stats")
help(rexp)
log(1)
log(10)
log10(10)
shiny::runApp()
help(switch)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help(plot)
shiny::runApp()
plot(color)
help(plot)
help(abs)
help(lines)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help(plot)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
help(plot)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
':'
?´:´
?:
?':'
?'&'
par(new=FALSE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tsin <- function(tss,eps) {
ftsin <- (abs(tss-10) <= eps)
if (sum(ftsin) > 0) {
return(tss[,ftsin])
} else {
return(10)
}
}
tsin(rnom(100),.5)
tsin(rnorm(100),.5)
tsin(rnorm(100),.1)
tsin <- function(tss,eps) {
ftsin <- (abs(tss) <= eps)
if (sum(ftsin) > 0) {
return(tss[,ftsin])
} else {
return(10)
}
}
tsin(rnorm(100),.5)
tsin <- function(tss,eps) {
ftsin <- (abs(tss) <= eps)
print(ftsin)
if (sum(ftsin) > 0) {
return(tss[,ftsin])
} else {
return(10)
}
}
tsin(rnorm(10),.5)
tsin <- function(tss,eps) {
ftsin <- (abs(tss[ncol(tss),]) <= eps)
print(ftsin)
if (sum(ftsin) > 0) {
return(tss[,ftsin])
} else {
return(10)
}
}
tsin(rnorm(10),.5)
ser <- matrix(rnorm(50),ncol=5, nrow=10)
ser
tsin(ser,.5)
abs(ser[ncol(ser),])
abs(ser[nrow(ser),])
tsin <- function(tss,eps) {
ftsin <- (abs(tss[nrow(tss),]) <= eps)
print(ftsin)
if (sum(ftsin) > 0) {
return(tss[,ftsin])
} else {
return(10)
}
}
tsin(ser,.5)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
table <- data.frame(1:10,101:110)
table
t(table)
table
shiny::runApp()
shiny::runApp()
g <- 1:10
g
t(g)
g
g <- as.data.frame(g)
f
g
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runGitHub("shiny-examples", "rstudio", subdir = "001-hello")
shiny::runGitHub("shiny-examples", "rstudio", subdir = "006-tabsets")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
q()
q()
